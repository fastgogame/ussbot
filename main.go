package main

import (
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const botToken = "8275968890:AAEJOmtFwzVSWuOPG5bMxl0qX9GktiBh-j4"

func main() {
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: %v", err)
	}

	bot.Debug = true
	log.Printf("–ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	stop := make(chan os.Signal, 1)
	signal.Notify(stop, os.Interrupt, syscall.SIGTERM)

	log.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É.")

	for {
		select {
		case update := <-updates:
			handleUpdate(bot, update)
		case <-stop:
			log.Println("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
			return
		}
	}
}

// –°–æ–∑–¥–∞–µ–º ReplyKeyboard –º–µ–Ω—é
func getMainMenu() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"),
			tgbotapi.NewKeyboardButton("üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å"),
			tgbotapi.NewKeyboardButton("üëã –ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å"),
		),
	)
}

func handleUpdate(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
	if update.Message != nil && update.Message.NewChatMembers != nil {
		handleBotAddedToGroup(bot, update.Message)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é)
	if update.Message != nil && update.Message.Text != "" {
		handleTextMessage(bot, update.Message)
		return
	}
}

func handleBotAddedToGroup(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	for _, newMember := range message.NewChatMembers {
		if newMember.ID == bot.Self.ID {
			welcomeText := `üëã –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –Ø –Ω–æ–≤—ã–π –±–æ—Ç —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã! 

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –≤–Ω–∏–∑—É –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π.`

			msg := tgbotapi.NewMessage(message.Chat.ID, welcomeText)
			msg.ReplyMarkup = getMainMenu()
			sendMessage(bot, msg)
			log.Printf("–ë–æ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è –≤ –≥—Ä—É–ø–ø–µ: %s", message.Chat.Title)
			return
		}
	}
}

func handleTextMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
	if message.From != nil && message.From.ID == bot.Self.ID {
		return
	}

	switch message.Text {
	case "üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è":
		handleTimeCommand(bot, message)
	case "üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å":
		handleTimezoneCommand(bot, message)
	case "üëã –ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å":
		handleSayHello(bot, message)
	default:
		return
	}
}

func handleSayHello(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	instructions := `üëã **–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**

–ù–∞–ø–∏—à–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å.

**–ü—Ä–∏–º–µ—Ä:**
@username
–∏–ª–∏
@ivanov`

	msg := tgbotapi.NewMessage(message.Chat.ID, instructions)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true) // –£–±–∏—Ä–∞–µ–º –º–µ–Ω—é –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –≤–≤–æ–¥–∞
	sendMessage(bot, msg)
}

func handleTimeCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	// –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ
	location, err := time.LoadLocation("Europe/Moscow")
	if err != nil {
		location = time.UTC
	}

	currentTime := time.Now().In(location)

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
	timeStr := currentTime.Format("02.01.2006 15:04:05")
	timezoneStr := currentTime.Format("MST")

	text := "üïê **–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:**\n\n" +
		"**–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:** " + timeStr + "\n" +
		"**–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** " + timezoneStr + " (Europe/Moscow)"

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = getMainMenu()
	sendMessage(bot, msg)
}

func handleTimezoneCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	// –¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
	location, err := time.LoadLocation("Europe/Moscow")
	if err != nil {
		location = time.UTC
	}

	currentTime := time.Now().In(location)
	timezoneStr := currentTime.Format("MST")
	timezoneOffset := currentTime.Format("-07:00")

	text := "üåç **–¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:**\n\n" +
		"**–ù–∞–∑–≤–∞–Ω–∏–µ:** Europe/Moscow\n" +
		"**–°–º–µ—â–µ–Ω–∏–µ:** " + timezoneStr + " (" + timezoneOffset + ")\n" +
		"**–ì–æ—Ä–æ–¥:** –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è\n\n" +
		"_–í—Ä–µ–º—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏_"

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = getMainMenu()
	sendMessage(bot, msg)
}

// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
func deleteMessage(bot *tgbotapi.BotAPI, chatID int64, messageID int) {
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, messageID)
	_, err := bot.Send(deleteMsg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func sendMessage(bot *tgbotapi.BotAPI, msg tgbotapi.MessageConfig) {
	_, err := bot.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err)
	}
}
