package main

import (
	"database/sql"
	"fmt"
	"log"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func main() {
	token := "8275968890:AAEJOmtFwzVSWuOPG5bMxl0qX9GktiBh-j4"
	if token == "" {
		log.Fatal("–£–∫–∞–∂–∏ TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
	}

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatal(err)
	}

	log.Printf("‚úÖ Authorized as %s", bot.Self.UserName)

	db, err := initDB("data/todo.db")
	if err != nil {
		log.Fatalf("initDB error: %v", err)
	}
	defer db.Close()

	log.Println("DB ready!")

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		// ===== –ì–†–£–ü–ü–ê =====
		if update.Message != nil && (update.Message.Chat.IsGroup() || update.Message.Chat.IsSuperGroup()) {
			text := update.Message.Text

			if strings.Contains(text, "@") && strings.Contains(text, "+") {
				parts := strings.SplitN(text, "+", 2)
				if len(parts) == 2 {
					toUser := strings.TrimSpace(parts[0])
					taskText := strings.TrimSpace(parts[1])

					from := update.Message.From
					fromName := from.UserName
					if fromName == "" {
						fromName = from.FirstName
					}

					// –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ assignee –≤ –ë–î
					var assigneeID int64
					err := db.QueryRow("SELECT user_id FROM members WHERE user_name = ?", toUser).Scan(&assigneeID)

					if err == sql.ErrNoRows {
						// –ß–µ–ª–æ–≤–µ–∫–∞ –µ—â—ë –Ω–µ—Ç –≤ –ë–î ‚Üí –ø—Ä–æ—Å–∏–º –µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–∫—É
						msg := tgbotapi.NewMessage(update.Message.Chat.ID,
							fmt.Sprintf("üìå –ó–∞–¥–∞—á–∞ –¥–ª—è %s: %s\n(–Ω–∞–∑–Ω–∞—á–∏–ª @%s)\n\nüëâ %s, –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–∫—É /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
								toUser, taskText, fromName, toUser))
						bot.Send(msg)
						continue
					} else if err != nil {
						log.Println("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err)
						continue
					}

					// –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É
					task := Task{
						ChatID:       update.Message.Chat.ID,
						CreatorID:    int64(from.ID),
						CreatorName:  fromName,
						AssigneeID:   assigneeID,
						AssigneeName: toUser,
						Text:         taskText,
						CreatedAt:    time.Now(),
					}

					id, err := SaveTask(db, task)
					if err != nil {
						log.Printf("SaveTask error: %v", err)
						continue
					}

					log.Printf("Task saved with ID %d\n", id)

					// –û—Ç–≤–µ—Ç –≤ –≥—Ä—É–ø–ø—É
					//groupMsg := tgbotapi.NewMessage(update.Message.Chat.ID,
					//	fmt.Sprintf("üìå –ó–∞–¥–∞—á–∞ –¥–ª—è %s: %s\n(–Ω–∞–∑–Ω–∞—á–∏–ª @%s)", toUser, taskText, fromName))
					//bot.Send(groupMsg)

					// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ª–∏—á–∫—É
					bot.Send(tgbotapi.NewMessage(task.CreatorID, fmt.Sprintf("‚úÖ –¢—ã –Ω–∞–∑–Ω–∞—á–∏–ª –∑–∞–¥–∞—á—É –¥–ª—è %s: %s", toUser, taskText)))
					bot.Send(tgbotapi.NewMessage(task.AssigneeID, fmt.Sprintf("üì• –¢–µ–±–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: %s (–æ—Ç @%s)", taskText, fromName)))
				}
			}
		}

		// ===== –õ–ò–ß–ö–ê =====
		if update.Message != nil && update.Message.Chat.IsPrivate() {
			userID := update.Message.From.ID
			username := "@" + update.Message.From.UserName

			switch update.Message.Text {
			case "/start":
				// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ë–î
				_, err := db.Exec(`
					INSERT INTO members (chat_id, user_id, user_name)
					VALUES (?, ?, ?)
					ON CONFLICT(chat_id, user_id) DO UPDATE SET user_name = excluded.user_name
				`, 0, userID, username)
				if err != nil {
					log.Println("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:", err)
				}

				// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ —Å –ø—É—Å—Ç—ã–º assignee_id
				res, err := db.Exec(`
					UPDATE tasks
					SET assignee_id = ?
					WHERE assignee_name = ? AND assignee_id = 0
				`, userID, username)
				if err != nil {
					log.Println("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á:", err)
				} else {
					n, _ := res.RowsAffected()
					if n > 0 {
						log.Printf("–ü—Ä–∏–≤—è–∑–∞–Ω–æ %d —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á –∫ %s", n, username)
					}
				}

				// –ú–µ–Ω—é
				menu := tgbotapi.NewReplyKeyboard(
					tgbotapi.NewKeyboardButtonRow(
						tgbotapi.NewKeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"),
					),
				)
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç! –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –∑–∞–¥–∞—á–∏.\n–í–æ—Ç –º–µ–Ω—é:")
				msg.ReplyMarkup = menu
				bot.Send(msg)

			case "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏":
				tasks, err := GetTasksByUser(db, int64(userID))
				if err != nil {
					bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á"))
					continue
				}
				if len(tasks) == 0 {
					bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á üéâ"))
				} else {
					text := "–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n"
					for i, t := range tasks {
						text += fmt.Sprintf("%d. %s (–æ—Ç @%s)\n", i+1, t.Text, t.CreatorName)
					}
					bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, text))
				}

			default:
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é üëá"))
			}
		}
	}
}
